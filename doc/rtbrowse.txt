*rtbrowse.txt*			 Browse Neovim runtime files on GitHub

License: MIT

CONTENTS						     *rtbrowse-contents*

Introduction		|rtbrowse-introduction|
Installation		|rtbrowse-installation|
Usage			|rtbrowse-usage|
Configuration		|rtbrowse-configuration|
API			|rtbrowse-api|
FAQ			|rtbrowse-faq|
Development		|rtbrowse-development|
Reference		|rtbrowse-reference|

==============================================================================
INTRODUCTION						 *rtbrowse-introduction*

rtbrowse is a Neovim plugin that lets you open the corresponding GitHub
source page for any Neovim runtime file and line(s) directly from your editor.
It is useful for exploring Neovim's source code, referencing documentation,
or sharing links to specific lines.

Also, you can call this plugin on sources other than Neovim runtime files.
Then it fallbacks to use other plugins (default: |Snacks.gitbrowse()|). So you
can use this plugin without worrying about the file you are seeing.

==============================================================================
INSTALLATION						 *rtbrowse-installation*

Use your favorite plugin manager. Example for lazy.nvim:
>lua
    -- You need no `opts = {}`
    { "delphinus/rtbrowse.nvim" }
<
Or, setup with full configuration. See |rtbrowse-configuration|.
>lua
    {
      "delphinus/rtbrowse.nvim",
      -- You may use this plugin with keymaps.
      keys = {
	{
	  "<Leader>gB",
	  function() require("rtbrowse").browse() end,
	  mode = { "n", "x", "o" },
	},
      },
      -- full configuration options
      opts = {
	fallback = function()
	  -- custom fallback action
	end,
	get_commit = "curl", -- or "gh"
      },
    }
<
==============================================================================
USAGE								*rtbrowse-usage*

To open the current runtime file on GitHub:
>vim
    :lua require("rtbrowse").browse()
<
- If you have a visual selection, the selected lines will be highlighted in the
  GitHub link.
- If not, the current line will be used.

Example key mappings:
>vim
    nnoremap <Leader>gB :lua require("rtbrowse").browse()<CR>
    vnoremap <Leader>gB :lua require("rtbrowse").browse()<CR>
<
If the file is not a Neovim runtime file, a fallback action
|rtbrowse-configuration-fallback| is triggered.

==============================================================================
CONFIGURATION						*rtbrowse-configuration*

You can configure rtbrowse by passing options to setup():
>lua
    require("rtbrowse").setup({
      fallback = function()
        -- custom fallback action
      end,
      get_commit = "curl", -- or "gh"
    })
<					       *rtbrowse-configuration-fallback*
fallback ~

Default: fallback to |Snacks.gitbrowse()| (See rtbrowse.lua for the detail)
Type: `fun(): nil`

A Function to call if the file is not a Neovim runtime file. By default, it
tries to call |Snacks.gitbrowse()| if available.

					      *rtbrowse-configuration-get_commit*
get_commit ~

Default: `"curl"`
Type: `"curl"|"gh"

Which tool to use for fetching commit info. For almost users, `curl` can work
good, but someone may fail by rate limit. You can use GitHub CLI (`gh` command)
for an alternative method. See about the link below.
https://docs.github.com/en/github-cli/github-cli/about-github-cli

==============================================================================
API								  *rtbrowse-api*

All functions are exported via `require("rtbrowse").*`.
>lua
    require("rtbrowse").browse()   -- Open current file on GitHub
<
==============================================================================
FAQ								  *rtbrowse-faq*

Q: What files can be browsed?
A: Only files under Neovim runtime directory (e.g. |$VIMRUNTIME|) are supported.

Q: What can occur if the file is not a runtime file?
A: The fallback function is called (see |rtbrowse-configuration-fallback|).

==============================================================================
DEVELOPMENT						  *rtbrowse-development*

- Issues and PRs are welcome!
- Source: https://github.com/delphinus/rtbrowse.nvim

vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet
